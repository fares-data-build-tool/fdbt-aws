AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for ECS resources

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - test
      - preprod
      - prod
  ProductName:
    Type: String
    Default: fdbt
  SiteImageUrl:
    Type: String
    Description: The url of the site docker image in ECR
  SiteContainerPort:
    Type: Number
    Default: 80
    Description: Port on which the site process is running in the container
  SiteContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the site container. 1024 is 1 CPU
  SiteContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the site container
  SiteDesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the site service task to run

Resources:
  SiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProductName}-site-${Stage}

  MonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProductName}-monitoring-${Stage}

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProductName}-fargate-cluster-${Stage}

  SiteTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProductName}-site-${Stage}
      Cpu: !Ref SiteContainerCpu
      Memory: !Ref SiteContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsTaskExecutionRoleArn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsSiteTaskRoleArn
      ContainerDefinitions:
        - Name: !Sub ${ProductName}-site-${Stage}
          Cpu: !Ref SiteContainerCpu
          Memory: !Ref SiteContainerMemory
          Image: !Ref SiteImageUrl
          PortMappings:
            - ContainerPort: !Ref SiteContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SiteLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProductName
          Environment:
            - Name: STAGE
              Value: !Ref Stage
            - Name: AWS_NODEJS_CONNECTION_REUSE_ENABLED
              Value: "1"
            - Name: STATIC_FILES_BUCKET_URL
              Value:
                Fn::ImportValue: !Sub ${Stage}:StaticFilesBucketUrl
            - Name: RDS_HOST
              Value:
                Fn::ImportValue: !Sub ${Stage}:RdsHostName
            - Name: USER_POOL_CLIENT_ID
              Value:
                Fn::ImportValue: !Sub ${Stage}:UserPoolClientID
            - Name: USER_POOL_ID
              Value:
                Fn::ImportValue: !Sub ${Stage}:UserPoolID

  SiteService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProductName}-site-${Stage}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: "1.4.0"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref SiteDesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${Stage}:FargateSiteContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetA
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetB
      TaskDefinition: !Ref SiteTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${ProductName}-site-${Stage}
          ContainerPort: !Ref SiteContainerPort
          TargetGroupArn: !Ref SiteTargetGroup

  SiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ProductName}-site-tg-${Stage}
      Port: !Ref SiteContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetA
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetB
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Stage}:LoadBalancerSecurityGroup

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub ${Stage}:CertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref SiteTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS

  ALBRedirectHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  LoadbalancerArn:
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Sub ${Stage}:LoadbalancerArn
